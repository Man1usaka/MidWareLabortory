package yao.study.remote.tool;

import yao.study.remote.model.Alumni;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/**
 * @author Y Jiang
 */
public class InfoGenerator {
    private static InfoGenerator infoGenerator;

    final private String[] firstNameSet = {
                "赵", "钱", "孙", "李", "周", "吴", "郑", "王", "冯", "陈", "楮", "卫", "蒋", "沈", "韩", "杨",
                "朱", "秦", "尤", "许", "何", "吕", "施", "张", "孔", "曹", "严", "华", "金", "魏", "陶", "姜",
                "戚", "谢", "邹", "喻", "柏", "水", "窦", "章", "云", "苏", "潘", "葛", "奚", "范", "彭", "郎",
                "鲁", "韦", "昌", "马", "苗", "凤", "花", "方", "俞", "任", "袁", "柳", "酆", "鲍", "史", "唐",
                "费", "廉", "岑", "薛", "雷", "贺", "倪", "汤", "滕", "殷", "罗", "毕", "郝", "邬", "安", "常",
                "乐", "于", "时", "傅", "皮", "卞", "齐", "康", "伍", "余", "元", "卜", "顾", "孟", "平", "黄",
                "和", "穆", "萧", "尹", "姚", "邵", "湛", "汪", "祁", "毛", "禹", "狄", "米", "贝", "明", "臧",
                "计", "伏", "成", "戴", "谈", "宋", "茅", "庞", "熊", "纪", "舒", "屈", "项", "祝", "董", "梁",
                "杜", "阮", "蓝", "闽", "席", "季", "麻", "强", "贾", "路", "娄", "危", "江", "童", "颜", "郭",
                "梅", "盛", "林", "刁", "锺", "徐", "丘", "骆", "高", "夏", "蔡", "田", "樊", "胡", "凌", "霍",
                "虞", "万", "支", "柯", "昝", "管", "卢", "莫", "经", "房", "裘", "缪", "干", "解", "应", "宗",
                "丁", "宣", "贲", "邓", "郁", "单", "杭", "洪", "包", "诸", "左", "石", "崔", "吉", "钮", "龚",
                "程", "嵇", "邢", "滑", "裴", "陆", "荣", "翁", "荀", "羊", "於", "惠", "甄", "麹", "家", "封",
                "芮", "羿", "储", "靳", "汲", "邴", "糜", "松", "井", "段", "富", "巫", "乌", "焦", "巴", "弓",
                "牧", "隗", "山", "谷", "车", "侯", "宓", "蓬", "全", "郗", "班", "仰", "秋", "仲", "伊", "宫",
                "宁", "仇", "栾", "暴", "甘", "斜", "厉", "戎", "祖", "武", "符", "刘", "景", "詹", "束", "龙",
                "叶", "幸", "司", "韶", "郜", "黎", "蓟", "薄", "印", "宿", "白", "怀", "蒲", "邰", "从", "鄂",
                "索", "咸", "籍", "赖", "卓", "蔺", "屠", "蒙", "池", "乔", "阴", "郁", "胥", "能", "苍", "双",
                "闻", "莘", "党", "翟", "谭", "贡", "劳", "逄", "姬", "申", "扶", "堵", "冉", "宰", "郦", "雍",
                "郤", "璩", "桑", "桂", "濮", "牛", "寿", "通", "边", "扈", "燕", "冀", "郏", "浦", "尚", "农",
                "温", "别", "庄", "晏", "柴", "瞿", "阎", "充", "慕", "连", "茹", "习", "宦", "艾", "鱼", "容",
                "向", "古", "易", "慎", "戈", "廖", "庾", "终", "暨", "居", "衡", "步", "都", "耿", "满", "弘",
                "匡", "国", "文", "寇", "广", "禄", "阙", "东", "欧", "殳", "沃", "利", "蔚", "越", "夔", "隆",
                "师", "巩", "厍", "聂", "晁", "勾", "敖", "融", "冷", "訾", "辛", "阚", "那", "简", "饶", "空",
                "曾", "毋", "沙", "乜", "养", "鞠", "须", "丰", "巢", "关", "蒯", "相", "查", "后", "荆", "红",
                "游", "竺", "权", "逑", "盖", "益", "桓", "公", "仉", "督", "晋", "楚", "阎", "法", "汝", "鄢",
                "涂", "钦", "岳", "帅", "缑", "亢", "况", "后", "有", "琴", "归", "海", "墨", "哈", "谯", "笪",
                "年", "爱", "阳", "佟", "商", "牟", "佘", "佴", "伯", "赏", "万俟", "司马", "上官", "欧阳", "夏侯",
                "诸葛", "闻人", "东方", "赫连", "皇甫", "尉迟", "公羊", "澹台", "公冶", "宗政", "濮阳", "淳于", "单于", "太叔",
                "申屠", "公孙", "仲孙", "轩辕", "令狐", "锺离", "宇文", "长孙", "慕容", "鲜于", "闾丘", "司徒", "司空", "丌官",
                "司寇", "子车", "微生", "颛孙", "端木", "巫马", "公西", "漆雕", "乐正", "壤驷", "公良", "拓拔", "夹谷", "宰父",
                "谷梁", "段干", "百里", "东郭", "南门", "呼延", "羊舌", "梁丘", "左丘", "东门", "西门", "南宫"};

        final private String[] lastNameSet = {"娟", "英", "华", "慧", "巧", "美", "娜", "静", "淑", "惠", "珠", "翠", "雅", "芝", "玉", "萍", "红", "娥", "玲", "芬", "芳", "燕", "彩", "春", "菊", "兰", "凤", "洁", "梅", "琳", "素", "云", "莲", "真", "环", "雪", "荣", "爱", "妹", "霞", "香", "月", "莺", "媛", "艳", "瑞", "凡", "佳", "嘉", "琼", "勤", "珍", "贞", "莉", "桂", "娣", "叶", "璧", "璐", "娅", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "姣", "婉", "娴", "瑾", "颖", "露", "瑶", "怡", "婵", "雁", "蓓", "纨", "仪", "荷", "丹", "蓉", "眉", "君", "琴", "蕊", "薇", "菁", "梦", "岚", "苑", "筠", "柔", "竹", "霭", "凝", "晓", "欢", "霄", "枫", "芸", "菲", "寒", "欣", "滢", "", "伊", "亚", "宜", "可", "姬", "舒", "影", "荔", "枝", "思", "丽", "秀", "飘", "育", "", "馥", "琦", "晶", "妍", "茜", "秋", "珊", "莎", "锦", "黛", "青", "倩", "婷", "宁", "", "蓓", "纨", "苑", "婕", "馨", "瑗", "琰", "韵", "融", "园", "艺", "咏", "卿", "聪", "", "澜", "纯", "毓", "悦", "昭", "冰", "爽", "琬", "茗", "羽", "希", "伟", "刚", "勇", "毅", "俊", "峰", "强", "军", "平", "保", "东", "文", "辉", "力", "明", "永", "健", "世", "广", "志", "义", "兴", "良", "海", "山", "仁", "波", "宁", "贵", "福", "生", "龙", "元", "全", "国", "胜", "学", "祥", "才", "发", "武", "新", "利", "清", "飞", "彬", "富", "顺", "信", "子", "杰", "涛", "昌", "成", "康", "星", "光", "天", "达", "安", "岩", "中", "茂", "进", "林", "有", "坚", "和", "彪", "博", "诚", "先", "敬", "震", "振", "壮", "会", "思", "群", "豪", "心", "邦", "承", "乐", "绍", "功", "松", "善", "厚", "庆", "磊", "民", "友", "裕", "河", "哲", "江", "超", "浩", "亮", "政", "谦", "亨", "奇", "固", "之", "轮", "翰", "朗", "伯", "宏", "言", "若", "鸣", "朋", "斌", "梁", "栋", "维", "启", "克", "伦", "翔", "旭", "鹏", "泽", "晨", "辰", "士", "以", "建", "家", "致", "树", "炎", "德", "行", "时", "泰", "盛"};
        final private String[] sexSet = {"男", "女"};
        final private String[] workingLocationSet = {"北京市", "天津市", "石家庄市", "唐山市", "秦皇岛市", "邯郸市", "邢台市", "保定市", "张家口市", "承德市", "衡水市", "廊坊市", "沧州市", "太原市", "大同市", "阳泉市", "长治市", "晋城市", "朔州市", "晋中市", "运城市", "忻州市", "临汾市", "吕梁市", "呼和浩特市", "包头市", "乌海市", "赤峰市", "通辽市", "鄂尔多斯市", "呼伦贝尔市", "巴彦淖尔市", "乌兰察布市", "兴安盟", "锡林郭勒盟", "阿拉善盟", "沈阳市", "大连市", "鞍山市", "抚顺市", "本溪市", "丹东市", "锦州市", "营口市", "阜新市", "辽阳市", "盘锦市", "铁岭市", "朝阳市", "葫芦岛市", "长春市", "吉林市", "四平市", "辽源市", "通化市", "白山市", "松原市", "白城市", "延边朝鲜族自治州", "哈尔滨市", "齐齐哈尔市", "鸡西市", "鹤岗市", "双鸭山市", "大庆市", "伊春市", "佳木斯市", "七台河市", "牡丹江市", "黑河市", "绥化市", "大兴安岭地区", "上海市", "南京市", "无锡市", "徐州市", "常州市", "苏州市", "南通市", "连云港市", "淮安市", "盐城市", "扬州市", "镇江市", "泰州市", "宿迁市", "杭州市", "宁波市", "温州市", "嘉兴市", "湖州市", "绍兴市", "舟山市", "衢州市", "金华市", "台州市", "丽水市", "合肥市", "芜湖市", "蚌埠市", "淮南市", "马鞍山市", "淮北市", "铜陵市", "安庆市", "黄山市", "滁州市", "阜阳市", "宿州市", "巢湖市", "六安市", "亳州市", "池州市", "宣城市", "福州市", "厦门市", "莆田市", "三明市", "泉州市", "漳州市", "南平市", "龙岩市", "宁德市", "南昌市", "景德镇市", "萍乡市", "九江市", "新余市", "鹰潭市", "赣州市", "吉安市", "宜春市", "抚州市", "上饶市", "济南市", "青岛市", "淄博市", "枣庄市", "东营市", "烟台市", "潍坊市", "济宁市", "泰安市", "威海市", "日照市", "莱芜市", "临沂市", "德州市", "聊城市", "滨州市", "菏泽市", "郑州市", "开封市", "洛阳市", "平顶山市", "安阳市", "鹤壁市", "新乡市", "焦作市", "濮阳市", "许昌市", "漯河市", "三门峡市", "南阳市", "商丘市", "信阳市", "周口市", "驻马店市", "济源市", "武汉市", "黄石市", "十堰市", "宜昌市", "襄樊市", "鄂州市", "荆门市", "孝感市", "荆州市", "黄冈市", "咸宁市", "随州市", "恩施土家族苗族自治州", "仙桃市", "潜江市", "天门市", "神农架林区", "长沙市", "株洲市", "湘潭市", "衡阳市", "邵阳市", "岳阳市", "常德市", "张家界市", "益阳市", "郴州市", "永州市", "怀化市", "娄底市", "湘西土家族苗族自治州", "广州市", "韶关市", "深圳市", "珠海市", "汕头市", "佛山市", "江门市", "湛江市", "茂名市", "肇庆市", "惠州市", "梅州市", "汕尾市", "河源市", "阳江市", "清远市", "东莞市", "中山市", "潮州市", "揭阳市", "云浮市", "南宁市", "柳州市", "桂林市", "梧州市", "北海市", "防城港市", "钦州市", "贵港市", "玉林市", "百色市", "贺州市", "河池市", "来宾市", "崇左市", "海口市", "三亚市", "五指山市", "琼海市", "儋州市", "文昌市", "万宁市", "东方市", "定安县", "屯昌县", "澄迈县", "临高县", "白沙黎族自治县", "昌江黎族自治县", "乐东黎族自治县", "陵水黎族自治县", "保亭黎族苗族自治县", "琼中黎族苗族自治县", "西沙群岛", "南沙群岛", "中沙群岛的岛礁及其海域", "重庆市", "成都市", "自贡市", "攀枝花市", "泸州市", "德阳市", "绵阳市", "广元市", "遂宁市", "内江市", "乐山市", "南充市", "眉山市", "宜宾市", "广安市", "达州市", "雅安市", "巴中市", "资阳市", "阿坝藏族羌族自治州", "甘孜藏族自治州", "凉山彝族自治州", "贵阳市", "六盘水市", "遵义市", "安顺市", "铜仁地区", "黔西南布依族苗族自治州", "毕节地区", "黔东南苗族侗族自治州", "黔南布依族苗族自治州", "昆明市", "曲靖市", "玉溪市", "保山市", "昭通市", "丽江市", "思茅市", "临沧市", "楚雄彝族自治州", "红河哈尼族彝族自治州", "文山壮族苗族自治州", "西双版纳傣族自治州", "大理白族自治州", "德宏傣族景颇族自治州", "怒江傈僳族自治州", "迪庆藏族自治州", "拉萨市", "昌都地区", "山南地区", "日喀则地区", "那曲地区", "阿里地区", "林芝地区", "西安市", "铜川市", "宝鸡市", "咸阳市", "渭南市", "延安市", "汉中市", "榆林市", "安康市", "商洛市", "兰州市", "嘉峪关市", "金昌市", "白银市", "天水市", "武威市", "张掖市", "平凉市", "酒泉市", "庆阳市", "定西市", "陇南市", "临夏回族自治州", "甘南藏族自治州", "西宁市", "海东地区", "海北藏族自治州", "黄南藏族自治州", "海南藏族自治州", "果洛藏族自治州", "玉树藏族自治州", "海西蒙古族藏族自治州", "银川市", "石嘴山市", "吴忠市", "固原市", "中卫市", "乌鲁木齐市", "克拉玛依市", "吐鲁番地区", "哈密地区", "昌吉回族自治州", "博尔塔拉蒙古自治州", "巴音郭楞蒙古自治州", "阿克苏地区", "克孜勒苏柯尔克孜自治州", "喀什地区", "和田地区", "伊犁哈萨克自治州", "塔城地区", "阿勒泰地区", "石河子市", "阿拉尔市", "图木舒克市", "五家渠市", "台北市", "高雄市", "基隆市", "台中市", "台南市", "新竹市", "嘉义市", "台北县", "宜兰县", "桃园县", "新竹县", "苗栗县", "台中县", "彰化县", "南投县", "云林县", "嘉义县", "台南县", "高雄县", "屏东县", "澎湖县", "台东县", "花莲县", "中西区", "东区", "九龙城区", "观塘区", "南区", "深水埗区", "黄大仙区", "湾仔区", "油尖旺区", "离岛区", "葵青区", "北区", "西贡区", "沙田区", "屯门区", "大埔区", "荃湾区", "元朗区", "澳门特别行政区", "海外"};
        final private String[] companyFirstNameSet = {"贵", "富", "雄", "山", "进", "威", "宗", "恒", "力", "虹", "菲", "奇", "帅", "才", "浩", "智", "鑫", "欣", "民", "星", "昌", "琼", "毅", "森", "本", "祥", "品", "盛", "欧", "顺", "嘉", "伟", "华", "元", "佰", "益", "鼎", "日", "裕", "如", "光"};
        final private String[] companyLastNameSet = {"集团", "房地产开发", "科技", "工程", "装饰工程", "环境建设", "咨询管理", "物业管理", "国际工程技术", "贸易", "房产经纪", "资本"};
        final private String[] companySuffixSet = {"股份有限公司", "有限公司"};
        final private String[] dutiesSet = {"企业董事长", "企业副董事长", "企业董事", "企业董事会秘书", "企业总经理", "企业副总经理", "企业总经理助理", "企业总经理秘书", "卫生单位负责人", "科研单位负责人", "财务总监", "财务部经理", "财务部副经理", "财务主管", "财务助理", "审计部经理", "审计部副经理", "审计主管", "审计助理", "成本控制经理", "预算经理", "现金流经理", "应收帐款经理", "投标经理", "统计人员", "行政总监", "行政部经理", "行政部副经理", "行政主管", "行政专员", "行政助理", "法务经理", "法务主管", "法务助理", "档案管理", "安保主管", "保安员", "英语翻译", "日语翻译", "秘书", "收发员", "打字员", "接待员", "计算机操作员", "人力资源总监", "人力资源部经理", "人力资源部副经理", "人力资源主管", "招聘主管", "人事专员", "招聘专员", "薪酬福利专员", "培训专员", "人事助理", "培训师", "市场总监", "市场部经理", "市场部副经理", "市场主管", "市场助理", "公共关系经理", "公关关系主管", "公关员", "品牌经理", "品牌主管", "品牌推广人员", "促销管理人员", "促销员", "市场策划人员", "市场调研经理", "市场调研主管", "市场调研人员", "市场分析人员", "销售总监", "销售部经理", "销售部副经理", "销售主管", "销售助理", "全国销售经理", "区域销售经理", "呼叫中心主管", "大客户经理", "客户服务经理", "客户服务人员", "技术服务中心主管", "销售培训师", "销售员", "技术服务人员", "技术总监", "技术部经理", "技术部副经理", "研发/设计主管", "信息技术经理", "信息技术主管", "研发项目经理", "研发项目主管", "生产总监", "生产部经理", "生产部副经理", "采购经理", "采购主管", "采购员", "车间主任", "安全主管", "安全员", "生产主管", "质量主管", "检验员", "生产调度人员", "生产计划人员", "仓库主管", "仓库保管员", "生产统计人员", "生产现场管理人员", "广告设计部主任", "广告设计部副主任", "广告设计部助理", "广告设计部文员", "广告电脑制作人员", "广告设计人员", "广告业务员", "广告文案", "广告创意总监", "广告创意部副总监", "广告创意部总监助理", "广告创意部经理", "广告创意部副经理", "广告创意部主任", "广告创意部副主任", "广告创意部助理", "广告创意部文员", "广告策划部总监", "广告策划部副总监", "广告策划部总监助理", "广告策划部经理", "广告策划部副经理", "广告策划部主任", "广告策划部副主任", "广告策划部助理", "广告策划部文员", "广告制作部总监", "广告制作部副总监", "广告制作部总监助理", "广告制作部经理", "广告制作部副经理", "广告制作部主任", "广告制作部副主任", "广告制作部助理", "广告制作部文员", "广告统筹部总监", "广告统筹部副总监", "广告统筹部总监助理", "广告统筹部经理", "广告统筹部副经理", "广告统筹部主任", "广告统筹部副主任", "广告统筹部文员", "公关部总监", "公关部副总监", "公关部总监助理", "公关部经理", "公关部副经理", "公关部主任", "公关部副主任", "公关部助理", "公关部文员", "媒介部总监", "媒介部副总监", "媒介部总监助理", "媒介部经理", "媒介部副经理", "媒介部主任", "媒介部副主任", "媒介部助理", "媒介部文员", "计算机网络技术人员", "计算机系统管理员", "计算机软件测试技术人员", "计算机软件程序设计人员", "视频处理技术人员", "数据库开发技术人员", "数据库应用人员", "网络安全工程技术人员", "网络管理工程技术人员", "网络和信息管理员"};
        final private String[] telephonePrefixSet = {"13", "14", "15", "18", "17"};
        final private String[] emailSuffixSet = {"qq", "163", "gmail", "yahoo", "msn", "hotmail", "alo", "ask", "live"};
        final private String[] charSet = {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0"};

    private InfoGenerator() {
    }
    public static InfoGenerator getInstance() {
        if (infoGenerator == null) {
            synchronized (InfoGenerator.class) {
                if (infoGenerator == null) {
                    infoGenerator = new InfoGenerator();
                }
            }
        }
        return infoGenerator;
    }
    private String getRandomUnit(Random random, String[] dataSet) {
        Integer size = dataSet.length;
        Integer index = random.nextInt(size);
        return dataSet[index];
    }
    private String getRandomNumUnit(Integer minNum, Integer maxNum, String[] dataSet) {

        Random random = new Random();
        Integer num = random.nextInt(maxNum - minNum+1) + minNum;
        String result = "";
        for (Integer i = 0; i < num; i++) {
            result += getRandomUnit(random, dataSet);
        }
        return result;
    }
    private String getName() {
        Random random = new Random();
        return getRandomUnit(random, firstNameSet) + getRandomNumUnit(1, 2, lastNameSet);
    }
    private String getSex() {
        Random random = new Random();
        return getRandomUnit(random, sexSet);
    }
    private String getWorkingLocation() {
        Random random = new Random();
        return getRandomUnit(random, workingLocationSet);
    }
    private String getWorkUnit() {
        Random random = new Random();
        return getRandomNumUnit(1,2, companyFirstNameSet) + getRandomUnit(random, companyLastNameSet) + getRandomUnit(random, companySuffixSet);
    }
    private String getDuties() {
        Random random = new Random();
        return getRandomUnit(random, dutiesSet);
    }
    private String getTelephone() {
        Random random = new Random();
        String telephone = getRandomUnit(random, telephonePrefixSet);
        final Integer MAX_NUM = 9;
        for (Integer i = 0 ; i < MAX_NUM; i++) {
            Integer num = random.nextInt(10);
            telephone += num.toString();
        }
        return telephone;
    }
    private String getEmail() {
        Random random = new Random();
        return getRandomNumUnit(5,10,charSet)+"@"+getRandomUnit(random, emailSuffixSet)+".com";
    }
    private String getString(){
        return getRandomNumUnit(5,19,charSet);
    }
    private String getWechat() {
        return getString();
    }
    private Integer getYear() {
        Random random = new Random();
        return random.nextInt(50) + 1964;
    }


    public List<Alumni> generatorAlumni(int num){

        if(num<= 0){
            return null;
        }

        List<Alumni> alumnis = new ArrayList<>();
        for(int i=0;i<num;i++){
            Alumni temp = new Alumni();
            temp.setName(getName());
            temp.setPhone(getTelephone());
            temp.setJob(getDuties());
            temp.setCompany(getWorkUnit());
            temp.setGender(getSex());
            temp.setWeChat(getWechat());
            temp.setWorkCity(getWorkingLocation());
            temp.setMail(getEmail());

            int year = getYear();
            temp.setEnrollYear(year);
            temp.setGraduateYear(year+4);

            alumnis.add(temp);
        }
        return  alumnis;
    }


//    public  static void main(String[] argv){
//        for(Alumni alumni : new InfoGenerator().generatorAlumni(5)){
//            System.out.println(alumni);
//        }
//    }

}
